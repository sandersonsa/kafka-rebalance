spring.application.name=kafka-springboot-performance
spring.kafka.bootstrap-servers=amq-streams-kafka-bootstrap.kafka.svc.cluster.local:9092
# spring.kafka.consumer.group-id=kafka-springboot-performance
spring.kafka.consumer.auto-offset-reset=latest
# max.poll.interval.ms=300000
# max.poll.records=5
# heartbeat.interval.ms=3000
# session.timeout.ms=10000
# enable.auto.commit=false



# spring.kafka.consumer.properties.max.poll.interval.ms=${MAX_POLL_MS:50000}
# spring.kafka.consumer.max-poll-records=${MAX_POLL_RECORDS:100}



# # spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.url=jdbc:postgresql://postgresql:5432/kafka
# # spring.datasource.url=jdbc:postgresql://postgresql:5432/kafka?currentSchema=kafka
# spring.datasource.driverClassName=org.postgresql.Driver
# spring.datasource.username=admin
# spring.datasource.password=admin
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.hibernate.ddl-auto=update
# # spring.jpa.properties.hibernate.show_sql=true
# # spring.jpa.properties.hibernate.format_sql=true
# # spring.jpa.hibernate.ddl-auto=<create | create-drop | update | validate | none>
# # spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# # spring.h2.console.enabled=true

# # spring.h2.console.path=/h2-console
# # spring.h2.console.settings.trace=false
# # spring.h2.console.settings.web-allow-others=false

# app properties
app.spring.kafka.consumer.topic=t-rebalance
app.spring.kafka.consumer.group-id=kafka-springboot-performance
app.spring.kafka.consumer.group-id.http=kafka-springboot-performance-http
app.spring.kafka.max.poll.interval.ms=${MAX_POLL_MS:600000}
app.spring.kafka.max.poll.records=${MAX_POLL_RECORDS:150}

app.spring.kafka.consumer.delay.ms=${CONSUMER_DELAY:350}